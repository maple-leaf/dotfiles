--langdef=typescript
--map-typescript=+.ts
--map-typescript=+.tsx
--kinddef-typescript=c,class,classes
--kinddef-typescript=n,namespace,namespaces
--kinddef-typescript=M,module,modules
--kinddef-typescript=f,function,functions
--kinddef-typescript=v,variable,variables
--kinddef-typescript=m,member,members
--kinddef-typescript=i,interface,interfaces
--kinddef-typescript=t,type,types
--kinddef-typescript=e,enum,enums
--kinddef-typescript=I,import,imports

--regex-typescript=/^[ \t]*(export[ \t]+)?(default[ \t]+)?(async[ \t]+)?(function[ \t]*)?(\*)?[ \t]+([a-zA-Z0-9_$]+)[ \t]*/\6/f/{scope=set}
--regex-typescript=/^[ \t]*(export[ \t]+([a-z]+[ \t]+)?)?class[ \t]+([a-zA-Z0-9_$]+)/\3/c/{scope=set}
--regex-typescript=/^[ \t]*(declare[ \t]+)?namespace[ \t]+([a-zA-Z0-9_$]+)/\2/n/{scope=set}
--regex-typescript=/^[ \t]*(export[ \t]+)?module[ \t]+([a-zA-Z0-9_$]+)/\2/m/{scope=set}
--regex-typescript=/^[ \t]*export[ \t]+(var|let|const)[ \t]+([a-zA-Z0-9_$]+)/\2/v/{scope=set}
--regex-typescript=/^[ \t]*(var|let|const)[ \t]+([a-zA-Z0-9_$]+)[ \t]*=[ \t]*function[ \t]*[*]?[ \t]*\(\)/\2/v/{scope=set}
--regex-typescript=/^[ \t]*(export[ \t]+)?(public|protected|private)[ \t]+(static[ \t]+)?(abstract[ \t]+)?(((get|set)[ \t]+)|(async[ \t]+[*]*[ \t]*))?([a-zA-Z1-9_$]+)/\9/m/{scope=set}
--regex-typescript=/^[ \t]*(export[ \t]+)?interface[ \t]+([a-zA-Z0-9_$]+)/\2/i/{scope=set}
--regex-typescript=/^[ \t]*(export[ \t]+)?type[ \t]+([a-zA-Z0-9_$]+)/\2/t/{scope=set}
--regex-typescript=/^[ \t]*(export[ \t]+)?enum[ \t]+([a-zA-Z0-9_$]+)/\2/e/{scope=set}
--regex-typescript=/^[ \t]*import[ \t]+([a-zA-Z0-9_$]+)/\1/I/{scope=set}
